{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"softmax.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jjHj-gvsC-sA","executionInfo":{"status":"ok","timestamp":1611258028362,"user_tz":-60,"elapsed":39981,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"c97d2157-29b1-4a3c-ea8b-3cac2c992151"},"source":["from google.colab import drive\n","\n","drive.mount('/content/drive', force_remount=True)\n","import os\n","os.chdir(\"/content/drive/MyDrive\")\n","\n","# enter the foldername in your Drive where you have saved the unzipped\n","# 'cs231n' folder containing the '.py', 'classifiers' and 'datasets'\n","# folders.\n","# e.g. 'cs231n/assignments/assignment1/cs231n/'\n","FOLDERNAME = 'cs231n/assignment1/cs231n/'\n","\n","assert FOLDERNAME is not None, \"[!] Enter the foldername.\"\n","\n","assert FOLDERNAME is not None\n","%cd drive/My\\ Drive\n","%cp -r $FOLDERNAME ../../\n","%cd ../../\n","%cd cs231n/datasets/\n","!bash get_datasets.sh\n","%cd ../../"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n","[Errno 2] No such file or directory: 'drive/My Drive'\n","/content\n","/content\n","/content/cs231n/datasets\n","--2021-01-21 19:40:22--  http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","Resolving www.cs.toronto.edu (www.cs.toronto.edu)... 128.100.3.30\n","Connecting to www.cs.toronto.edu (www.cs.toronto.edu)|128.100.3.30|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 170498071 (163M) [application/x-gzip]\n","Saving to: ‘cifar-10-python.tar.gz’\n","\n","cifar-10-python.tar 100%[===================>] 162.60M  70.4MB/s    in 2.3s    \n","\n","2021-01-21 19:40:25 (70.4 MB/s) - ‘cifar-10-python.tar.gz’ saved [170498071/170498071]\n","\n","cifar-10-batches-py/\n","cifar-10-batches-py/data_batch_4\n","cifar-10-batches-py/readme.html\n","cifar-10-batches-py/test_batch\n","cifar-10-batches-py/data_batch_3\n","cifar-10-batches-py/batches.meta\n","cifar-10-batches-py/data_batch_2\n","cifar-10-batches-py/data_batch_5\n","cifar-10-batches-py/data_batch_1\n","/content\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"tags":["pdf-title"],"id":"Lyjg6BuRC-sG"},"source":["# Softmax exercise\n","\n","*Complete and hand in this completed worksheet (including its outputs and any supporting code outside of the worksheet) with your assignment submission. For more details see the [assignments page](http://vision.stanford.edu/teaching/cs231n/assignments.html) on the course website.*\n","\n","This exercise is analogous to the SVM exercise. You will:\n","\n","- implement a fully-vectorized **loss function** for the Softmax classifier\n","- implement the fully-vectorized expression for its **analytic gradient**\n","- **check your implementation** with numerical gradient\n","- use a validation set to **tune the learning rate and regularization** strength\n","- **optimize** the loss function with **SGD**\n","- **visualize** the final learned weights\n"]},{"cell_type":"code","metadata":{"tags":["pdf-ignore"],"id":"MfJLalUOC-sJ","executionInfo":{"status":"ok","timestamp":1611258028368,"user_tz":-60,"elapsed":39973,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}}},"source":["import random\n","import numpy as np\n","from cs231n.data_utils import load_CIFAR10\n","import matplotlib.pyplot as plt\n","\n","%matplotlib inline\n","plt.rcParams['figure.figsize'] = (10.0, 8.0) # set default size of plots\n","plt.rcParams['image.interpolation'] = 'nearest'\n","plt.rcParams['image.cmap'] = 'gray'\n","\n","# for auto-reloading extenrnal modules\n","# see http://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython\n","%load_ext autoreload\n","%autoreload 2"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"tags":["pdf-ignore"],"id":"53ZbdJvGC-sM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611258031588,"user_tz":-60,"elapsed":43183,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"2f3808dd-f88a-4c6a-d79f-0d8fdf7cc4e8"},"source":["def get_CIFAR10_data(num_training=49000, num_validation=1000, num_test=1000, num_dev=500):\n","    \"\"\"\n","    Load the CIFAR-10 dataset from disk and perform preprocessing to prepare\n","    it for the linear classifier. These are the same steps as we used for the\n","    SVM, but condensed to a single function.  \n","    \"\"\"\n","    # Load the raw CIFAR-10 data\n","    cifar10_dir = 'cs231n/datasets/cifar-10-batches-py'\n","    \n","    # Cleaning up variables to prevent loading data multiple times (which may cause memory issue)\n","    try:\n","       del X_train, y_train\n","       del X_test, y_test\n","       print('Clear previously loaded data.')\n","    except:\n","       pass\n","\n","    X_train, y_train, X_test, y_test = load_CIFAR10(cifar10_dir)\n","    \n","    # subsample the data\n","    mask = list(range(num_training, num_training + num_validation))\n","    X_val = X_train[mask]\n","    y_val = y_train[mask]\n","    mask = list(range(num_training))\n","    X_train = X_train[mask]\n","    y_train = y_train[mask]\n","    mask = list(range(num_test))\n","    X_test = X_test[mask]\n","    y_test = y_test[mask]\n","    mask = np.random.choice(num_training, num_dev, replace=False)\n","    X_dev = X_train[mask]\n","    y_dev = y_train[mask]\n","    \n","    # Preprocessing: reshape the image data into rows\n","    X_train = np.reshape(X_train, (X_train.shape[0], -1))\n","    X_val = np.reshape(X_val, (X_val.shape[0], -1))\n","    X_test = np.reshape(X_test, (X_test.shape[0], -1))\n","    X_dev = np.reshape(X_dev, (X_dev.shape[0], -1))\n","    \n","    # Normalize the data: subtract the mean image\n","    mean_image = np.mean(X_train, axis = 0)\n","    X_train -= mean_image\n","    X_val -= mean_image\n","    X_test -= mean_image\n","    X_dev -= mean_image\n","    \n","    # add bias dimension and transform into columns\n","    X_train = np.hstack([X_train, np.ones((X_train.shape[0], 1))])\n","    X_val = np.hstack([X_val, np.ones((X_val.shape[0], 1))])\n","    X_test = np.hstack([X_test, np.ones((X_test.shape[0], 1))])\n","    X_dev = np.hstack([X_dev, np.ones((X_dev.shape[0], 1))])\n","    \n","    return X_train, y_train, X_val, y_val, X_test, y_test, X_dev, y_dev\n","\n","\n","# Invoke the above function to get our data.\n","X_train, y_train, X_val, y_val, X_test, y_test, X_dev, y_dev = get_CIFAR10_data()\n","print('Train data shape: ', X_train.shape)\n","print('Train labels shape: ', y_train.shape)\n","print('Validation data shape: ', X_val.shape)\n","print('Validation labels shape: ', y_val.shape)\n","print('Test data shape: ', X_test.shape)\n","print('Test labels shape: ', y_test.shape)\n","print('dev data shape: ', X_dev.shape)\n","print('dev labels shape: ', y_dev.shape)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Train data shape:  (49000, 3073)\n","Train labels shape:  (49000,)\n","Validation data shape:  (1000, 3073)\n","Validation labels shape:  (1000,)\n","Test data shape:  (1000, 3073)\n","Test labels shape:  (1000,)\n","dev data shape:  (500, 3073)\n","dev labels shape:  (500,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EZqBNIE0C-sO"},"source":["## Softmax Classifier\n","\n","Your code for this section will all be written inside `cs231n/classifiers/softmax.py`.\n"]},{"cell_type":"code","metadata":{"id":"1MQ3zyp7C-sQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611258031590,"user_tz":-60,"elapsed":43174,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"162d312a-0fce-4405-cc37-358c7f410990"},"source":["# First implement the naive softmax loss function with nested loops.\n","# Open the file cs231n/classifiers/softmax.py and implement the\n","# softmax_loss_naive function.\n","\n","from cs231n.classifiers.softmax import softmax_loss_naive\n","import time\n","\n","# Generate a random softmax weight matrix and use it to compute the loss.\n","W = np.random.randn(3073, 10) * 0.0001\n","loss, grad = softmax_loss_naive(W, X_dev, y_dev, 0.0)\n","\n","# As a rough sanity check, our loss should be something close to -log(0.1).\n","print('loss: %f' % loss)\n","print('sanity check: %f' % (-np.log(0.1)))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["loss: 2.403351\n","sanity check: 2.302585\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"tags":["pdf-inline"],"id":"a6qIkvrlC-sS"},"source":["**Inline Question 1**\n","\n","Why do we expect our loss to be close to -log(0.1)? Explain briefly.**\n","\n","$\\color{blue}{\\textit Your Answer:}$ *Fill this in* \n","\n"]},{"cell_type":"code","metadata":{"id":"KSPh8DYwC-sT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611258037378,"user_tz":-60,"elapsed":48953,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"be7c2c03-f2fa-45ff-aabe-d38bc0fa2981"},"source":["# Complete the implementation of softmax_loss_naive and implement a (naive)\n","# version of the gradient that uses nested loops.\n","loss, grad = softmax_loss_naive(W, X_dev, y_dev, 0.0)\n","\n","# As we did for the SVM, use numeric gradient checking as a debugging tool.\n","# The numeric gradient should be close to the analytic gradient.\n","from cs231n.gradient_check import grad_check_sparse\n","f = lambda w: softmax_loss_naive(w, X_dev, y_dev, 0.0)[0]\n","grad_numerical = grad_check_sparse(f, W, grad, 10)\n","\n","# similar to SVM case, do another gradient check with regularization\n","loss, grad = softmax_loss_naive(W, X_dev, y_dev, 5e1)\n","f = lambda w: softmax_loss_naive(w, X_dev, y_dev, 5e1)[0]\n","grad_numerical = grad_check_sparse(f, W, grad, 10)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["numerical: 2.732990 analytic: 2.732990, relative error: 9.687283e-09\n","numerical: -0.638388 analytic: -0.638388, relative error: 4.227136e-08\n","numerical: 5.314389 analytic: 5.314389, relative error: 1.121580e-08\n","numerical: -2.717634 analytic: -2.717634, relative error: 2.215067e-09\n","numerical: -1.372119 analytic: -1.372119, relative error: 2.584184e-08\n","numerical: -1.218263 analytic: -1.218263, relative error: 5.706105e-11\n","numerical: -0.021244 analytic: -0.021244, relative error: 1.217425e-06\n","numerical: -2.891873 analytic: -2.891873, relative error: 6.029672e-09\n","numerical: 0.417960 analytic: 0.417960, relative error: 1.052549e-07\n","numerical: -2.518060 analytic: -2.518060, relative error: 8.746356e-10\n","numerical: 0.658000 analytic: 0.658000, relative error: 8.719826e-08\n","numerical: 1.441419 analytic: 1.441419, relative error: 2.101062e-08\n","numerical: -4.932602 analytic: -4.932602, relative error: 5.908605e-09\n","numerical: -0.588038 analytic: -0.588038, relative error: 2.959407e-08\n","numerical: 1.605414 analytic: 1.605414, relative error: 1.171531e-08\n","numerical: 0.687518 analytic: 0.687518, relative error: 5.236443e-08\n","numerical: -2.527700 analytic: -2.527700, relative error: 1.223680e-08\n","numerical: -1.738008 analytic: -1.738008, relative error: 1.632621e-10\n","numerical: 0.583666 analytic: 0.583666, relative error: 3.361258e-08\n","numerical: -2.529276 analytic: -2.529276, relative error: 3.800810e-09\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"A_P_YxpkC-sV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611258037927,"user_tz":-60,"elapsed":49492,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"ca5a43b9-eacd-4362-9307-fbda509eed71"},"source":["# Now that we have a naive implementation of the softmax loss function and its gradient,\n","# implement a vectorized version in softmax_loss_vectorized.\n","# The two versions should compute the same results, but the vectorized version should be\n","# much faster.\n","tic = time.time()\n","loss_naive, grad_naive = softmax_loss_naive(W, X_dev, y_dev, 0.000005)\n","toc = time.time()\n","print('naive loss: %e computed in %fs' % (loss_naive, toc - tic))\n","\n","from cs231n.classifiers.softmax import softmax_loss_vectorized\n","tic = time.time()\n","loss_vectorized, grad_vectorized = softmax_loss_vectorized(W, X_dev, y_dev, 0.000005)\n","toc = time.time()\n","print('vectorized loss: %e computed in %fs' % (loss_vectorized, toc - tic))\n","\n","# As we did for the SVM, we use the Frobenius norm to compare the two versions\n","# of the gradient.\n","grad_difference = np.linalg.norm(grad_naive - grad_vectorized, ord='fro')\n","print('Loss difference: %f' % np.abs(loss_naive - loss_vectorized))\n","print('Gradient difference: %f' % grad_difference)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["naive loss: 2.403351e+00 computed in 0.132545s\n","vectorized loss: 2.403351e+00 computed in 0.020841s\n","Loss difference: 0.000000\n","Gradient difference: 0.000000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tuning","tags":["code"],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611258337962,"user_tz":-60,"elapsed":349518,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"90578b96-4fbe-4947-8a0b-10c849a4834a"},"source":["# Use the validation set to tune hyperparameters (regularization strength and\n","# learning rate). You should experiment with different ranges for the learning\n","# rates and regularization strengths; if you are careful you should be able to\n","# get a classification accuracy of over 0.35 on the validation set.\n","\n","from cs231n.classifiers import Softmax\n","results = {}\n","best_val = -1\n","best_softmax = None\n","\n","################################################################################\n","# TODO:                                                                        #\n","# Use the validation set to set the learning rate and regularization strength. #\n","# This should be identical to the validation that you did for the SVM; save    #\n","# the best trained softmax classifer in best_softmax.                          #\n","################################################################################\n","\n","# Provided as a reference. You may or may not want to change these hyperparameters\n","learning_rates = [1e-7, 5e-7, 2e-7, 3e-7, 4e-7]\n","regularization_strengths = [2.5e4, 5e4, 3e4, 4e4]\n","\n","# *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","iters = 2000\n","for lr in learning_rates:\n","    for rs in regularization_strengths:\n","        softmax = Softmax()\n","        softmax.train(X_train, y_train, learning_rate=lr, reg=rs, num_iters=iters)\n","        \n","        y_train_pred = softmax.predict(X_train)\n","        acc_train = np.mean(y_train == y_train_pred)\n","        y_val_pred = softmax.predict(X_val)\n","        acc_val = np.mean(y_val == y_val_pred)\n","        \n","        results[(lr, rs)] = (acc_train, acc_val)\n","        \n","        if best_val < acc_val:\n","            best_val = acc_val\n","            best_softmax = softmax\n","# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    \n","# Print out results.\n","for lr, reg in sorted(results):\n","    train_accuracy, val_accuracy = results[(lr, reg)]\n","    print('lr %e reg %e train accuracy: %f val accuracy: %f' % (\n","                lr, reg, train_accuracy, val_accuracy))\n","    \n","print('best validation accuracy achieved during cross-validation: %f' % best_val)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["lr 1.000000e-07 reg 2.500000e+04 train accuracy: 0.356408 val accuracy: 0.367000\n","lr 1.000000e-07 reg 3.000000e+04 train accuracy: 0.349204 val accuracy: 0.357000\n","lr 1.000000e-07 reg 4.000000e+04 train accuracy: 0.333592 val accuracy: 0.350000\n","lr 1.000000e-07 reg 5.000000e+04 train accuracy: 0.328102 val accuracy: 0.332000\n","lr 2.000000e-07 reg 2.500000e+04 train accuracy: 0.352408 val accuracy: 0.373000\n","lr 2.000000e-07 reg 3.000000e+04 train accuracy: 0.343816 val accuracy: 0.347000\n","lr 2.000000e-07 reg 4.000000e+04 train accuracy: 0.326224 val accuracy: 0.350000\n","lr 2.000000e-07 reg 5.000000e+04 train accuracy: 0.322837 val accuracy: 0.338000\n","lr 3.000000e-07 reg 2.500000e+04 train accuracy: 0.352959 val accuracy: 0.361000\n","lr 3.000000e-07 reg 3.000000e+04 train accuracy: 0.341000 val accuracy: 0.354000\n","lr 3.000000e-07 reg 4.000000e+04 train accuracy: 0.337061 val accuracy: 0.356000\n","lr 3.000000e-07 reg 5.000000e+04 train accuracy: 0.334755 val accuracy: 0.339000\n","lr 4.000000e-07 reg 2.500000e+04 train accuracy: 0.341816 val accuracy: 0.356000\n","lr 4.000000e-07 reg 3.000000e+04 train accuracy: 0.338224 val accuracy: 0.355000\n","lr 4.000000e-07 reg 4.000000e+04 train accuracy: 0.336265 val accuracy: 0.342000\n","lr 4.000000e-07 reg 5.000000e+04 train accuracy: 0.320837 val accuracy: 0.340000\n","lr 5.000000e-07 reg 2.500000e+04 train accuracy: 0.341694 val accuracy: 0.364000\n","lr 5.000000e-07 reg 3.000000e+04 train accuracy: 0.343592 val accuracy: 0.355000\n","lr 5.000000e-07 reg 4.000000e+04 train accuracy: 0.332959 val accuracy: 0.346000\n","lr 5.000000e-07 reg 5.000000e+04 train accuracy: 0.327510 val accuracy: 0.330000\n","best validation accuracy achieved during cross-validation: 0.373000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"test","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611258337966,"user_tz":-60,"elapsed":349507,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"578fe556-f5ca-4639-b87a-f1dc1480ee45"},"source":["# evaluate on test set\n","# Evaluate the best softmax on test set\n","y_test_pred = best_softmax.predict(X_test)\n","test_accuracy = np.mean(y_test == y_test_pred)\n","print('softmax on raw pixels final test set accuracy: %f' % (test_accuracy, ))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["softmax on raw pixels final test set accuracy: 0.358000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"tags":["pdf-inline"],"id":"kB8c6M_cC-sa"},"source":["**Inline Question 2** - *True or False*\n","\n","Suppose the overall training loss is defined as the sum of the per-datapoint loss over all training examples. It is possible to add a new datapoint to a training set that would leave the SVM loss unchanged, but this is not the case with the Softmax classifier loss.\n","\n","$\\color{blue}{\\textit Your Answer:}$\n","\n","\n","$\\color{blue}{\\textit Your Explanation:}$\n","\n"]},{"cell_type":"code","metadata":{"id":"-z-tWtLXC-sb","colab":{"base_uri":"https://localhost:8080/","height":380},"executionInfo":{"status":"ok","timestamp":1611258338562,"user_tz":-60,"elapsed":350099,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}},"outputId":"6abb0df7-5167-47e4-f170-10be4c48c6c5"},"source":["# Visualize the learned weights for each class\n","w = best_softmax.W[:-1,:] # strip out the bias\n","w = w.reshape(32, 32, 3, 10)\n","\n","w_min, w_max = np.min(w), np.max(w)\n","\n","classes = ['plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n","for i in range(10):\n","    plt.subplot(2, 5, i + 1)\n","    \n","    # Rescale the weights to be between 0 and 255\n","    wimg = 255.0 * (w[:, :, :, i].squeeze() - w_min) / (w_max - w_min)\n","    plt.imshow(wimg.astype('uint8'))\n","    plt.axis('off')\n","    plt.title(classes[i])"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x576 with 10 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"no58EBu6C-sc","executionInfo":{"status":"ok","timestamp":1611258338565,"user_tz":-60,"elapsed":350099,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}}},"source":[""],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s7LPYFBGC-sd"},"source":["---\n","# IMPORTANT\n","\n","This is the end of this question. Please do the following:\n","\n","1. Click `File -> Save` to make sure the latest checkpoint of this notebook is saved to your Drive.\n","2. Execute the cell below to download the modified `.py` files back to your drive."]},{"cell_type":"code","metadata":{"id":"GFbnxSXmC-sd","executionInfo":{"status":"ok","timestamp":1611258338569,"user_tz":-60,"elapsed":350098,"user":{"displayName":"Alysmos dark","photoUrl":"","userId":"05230369544655081882"}}},"source":["import os\n","\n","FOLDER_TO_SAVE = os.path.join('drive/My Drive/', FOLDERNAME)\n","FILES_TO_SAVE = ['cs231n/classifiers/softmax.py']\n","\n","for files in FILES_TO_SAVE:\n","  with open(os.path.join(FOLDER_TO_SAVE, '/'.join(files.split('/')[1:])), 'w') as f:\n","    f.write(''.join(open(files).readlines()))"],"execution_count":10,"outputs":[]}]}